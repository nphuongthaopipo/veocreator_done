import React, { useState, useMemo } from 'react';
import { useAppContext } from '../../context/AppContext';
import { createVideoPrompts } from '../../services/geminiService';
import { useToast } from '../../context/ToastContext';
import Spinner from '../common/Spinner';
import { AppView, AutomationPrompt } from '../../types'; // Import AppView v√† AutomationPrompt

type ViewTab = 'create' | 'history';

const stylePills = [
    'Si√™u th·ª±c', 'Phim', 'Ho·∫°t h√¨nh Disney', 'Anime', 'Pixar', 'Truy·ªán tranh', 'Noir', 'Cyberpunk',
    'M√†u n∆∞·ªõc', 'Low-poly 3D', 'Cartoon 2D', 'Cartoon 3D', 'Disney', 'Pixel Art', 'Isometric',
    'Paper Cutout', 'Claymation', 'L·ªãch s·ª≠', 'ng√¥n ng·ªØ ti·∫øng anh', 'ƒë·ªìng b·ªô c√°c nh√¢n v·∫≠t','t·∫°o promt chi ti·∫øt cho video d√†i 10 ph√∫t',
    'Vi·∫øt Character Sheet m√¥ t·∫£ t·∫•t c·∫£ c√°c chi ti·∫øt c·ªët l√µi v√† kh√¥ng thay ƒë·ªïi c·ªßa nh√¢n v·∫≠t nh∆∞ t√™n tu·ªïi t√≥c m·∫Øt qu·∫ßn √°o ph·ª• ki·ªán',
    'ƒê·∫∑t t√™n cho nh√¢n v·∫≠t v√† lu√¥n g·ªçi b·∫±ng t√™n ƒë√≥','Sao ch√©p to√†n b·ªô Character Sheet v√†o ƒë·∫ßu m·ªói prompt m·ªõi'
];

const genres = [
    'H√†nh ƒë·ªông/Chi·∫øn ƒë·∫•u', 'T√¨nh c·∫£m/L√£ng m·∫°n', 'H√†i h∆∞·ªõc/Vui nh·ªôn', 'Kinh d·ªã/Horror',
    'B√≠ ·∫©n/Trinh th√°m', 'Fantasy/Th·∫ßn tho·∫°i', 'Khoa h·ªçc vi·ªÖn t∆∞·ªüng', 'Drama/Ch√≠nh k·ªãch',
    'Gi√°o d·ª•c/H·ªçc t·∫≠p', 'Phi√™u l∆∞u/Th√°m hi·ªÉm', 'ƒê·ªùi th∆∞·ªùng/Slice of Life', 'Trailer phim'
];

// C·∫≠p nh·∫≠t props ƒë·ªÉ nh·∫≠n setActiveView
interface CreatePromptsViewProps {
    setActiveView: (view: AppView) => void;
}

const CreatePromptsView: React.FC<CreatePromptsViewProps> = ({ setActiveView }) => {
    const { stories, prompts, addPrompts, deletePrompts, addAutomationPrompts } = useAppContext();
    const { showToast } = useToast();
    const [mainTab, setMainTab] = useState<ViewTab>('create');
    const [selectedStoryId, setSelectedStoryId] = useState('');
    const [granularity, setGranularity] = useState('detailed');
    const [selectedStyles, setSelectedStyles] = useState<string[]>([]);
    const [selectedGenre, setSelectedGenre] = useState(genres[0]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const [generatedPrompts, setGeneratedPrompts] = useState<string[]>([]);

    const [activeInputTab, setActiveInputTab] = useState<'select' | 'manual'>('select');
    const [manualStoryContent, setManualStoryContent] = useState('');

    const [showCustomStyleInput, setShowCustomStyleInput] = useState(false);
    const [customStyle, setCustomStyle] = useState('');

    // --- State m·ªõi cho tab L·ªãch s·ª≠ ---
    const [historyFilterStoryId, setHistoryFilterStoryId] = useState<string>('');
    const [selectedPromptIds, setSelectedPromptIds] = useState<string[]>([]);

    const handleStyleToggle = (style: string) => {
        setSelectedStyles(prev =>
            prev.includes(style) ? prev.filter(s => s !== style) : [...prev, style]
        );
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        let storyContent: string;
        let storyForPromptCreation: { id: string; title: string; content: string; };

        if (activeInputTab === 'select') {
            if (!selectedStoryId) {
                setError('Vui l√≤ng ch·ªçn m·ªôt c√¢u chuy·ªán.');
                return;
            }
            const story = stories.find(s => s.id === selectedStoryId);
            if (!story) {
                setError('Kh√¥ng t√¨m th·∫•y c√¢u chuy·ªán.');
                setIsLoading(false);
                return;
            }
            storyContent = story.content;
            storyForPromptCreation = story;
        } else { // manual tab
            if (!manualStoryContent.trim()) {
                setError('Vui l√≤ng nh·∫≠p n·ªôi dung c√¢u chuy·ªán.');
                return;
            }
            storyContent = manualStoryContent;
            storyForPromptCreation = {
                id: `manual-${new Date().toISOString()}`,
                title: `Manual story: ${storyContent.substring(0, 30)}...`,
                content: storyContent
            };
        }

        setError('');
        setGeneratedPrompts([]);
        setIsLoading(true);

        const combinedStyle = [...selectedStyles, selectedGenre, customStyle.trim()].filter(Boolean).join(', ');

        try {
            const response = await createVideoPrompts(storyContent, granularity, combinedStyle);
            const parsedJson = JSON.parse(response.text ?? '{"prompts": []}');
            const promptsArray = parsedJson.prompts.map((p: { prompt: string }) => p.prompt);
            setGeneratedPrompts(promptsArray);
            const newPrompts = promptsArray.map((p: string) => ({
                id: `${storyForPromptCreation.id}-${new Date().getTime()}-${Math.random()}`,
                storyId: storyForPromptCreation.id,
                storyTitle: storyForPromptCreation.title,
                prompt: p
            }));
            addPrompts(newPrompts);
            showToast('Prompts ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!', 'success');
        } catch (err) {
            console.error(err);
            setError('Kh√¥ng th·ªÉ t·∫°o prompts. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi t·ª´ API.');
            showToast('L·ªói khi t·∫°o prompts', 'error');
        } finally {
            setIsLoading(false);
        }
    };

    const handleCopyToClipboard = (content: string) => {
        navigator.clipboard.writeText(content).then(() => {
            showToast('ƒê√£ sao ch√©p v√†o clipboard!', 'success');
        }, (err) => {
            showToast('L·ªói khi sao ch√©p: ' + err, 'error');
        });
    };

    const handleToggleSelectPrompt = (id: string) => {
        setSelectedPromptIds(prev =>
            prev.includes(id) ? prev.filter(pId => pId !== id) : [...prev, id]
        );
    };

    const handleDeleteSelected = () => {
        if (selectedPromptIds.length === 0) return;
        deletePrompts(selectedPromptIds);
        showToast(`ƒê√£ x√≥a ${selectedPromptIds.length} prompt.`, 'success');
        setSelectedPromptIds([]);
    };

    const handleImportToVeo = () => {
        if (selectedPromptIds.length === 0) return;

        const promptsToImport: AutomationPrompt[] = prompts
            .filter(p => selectedPromptIds.includes(p.id))
            .map(p => ({
                id: `prompt-${Date.now()}-${Math.random()}`,
                text: p.prompt,
                status: 'idle',
                message: 'S·∫µn s√†ng'
            }));

        addAutomationPrompts(promptsToImport);
        showToast(`ƒê√£ import ${promptsToImport.length} prompt v√†o Veo.`, 'success');
        setSelectedPromptIds([]);
        setActiveView(AppView.AUTO_BROWSER);
    };

    const filteredHistoryPrompts = useMemo(() => {
        if (!historyFilterStoryId) {
            return prompts;
        }
        return prompts.filter(p => p.storyId === historyFilterStoryId);
    }, [prompts, historyFilterStoryId]);

    const renderCreateForm = () => (
        <>
            <div className="mb-6 flex border-b border-gray-300">
                <button type="button" onClick={() => setActiveInputTab('select')} className={`px-4 py-2 font-medium ${activeInputTab === 'select' ? 'text-accent border-b-2 border-accent' : 'text-dark-text'}`}>Ch·ªçn c√¢u chuy·ªán c√≥ s·∫µn</button>
                <button type="button" onClick={() => setActiveInputTab('manual')} className={`px-4 py-2 font-medium ${activeInputTab === 'manual' ? 'text-accent border-b-2 border-accent' : 'text-dark-text'}`}>Nh·∫≠p th·ªß c√¥ng</button>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
                {activeInputTab === 'select' && (
                    <div className="bg-secondary p-6 rounded-lg shadow-md">
                        <label className="block text-dark-text font-bold mb-2">Ch·ªçn c√¢u chuy·ªán</label>
                        <select value={selectedStoryId} onChange={e => setSelectedStoryId(e.target.value)} className="w-full p-3 bg-primary rounded-md border border-gray-300 focus:ring-2 focus:ring-accent focus:outline-none transition">
                            <option value="">-- Ch·ªçn m·ªôt c√¢u chuy·ªán --</option>
                            {stories.map(story => (
                                <option key={story.id} value={story.id}>{story.title}</option>
                            ))}
                        </select>
                    </div>
                )}

                {activeInputTab === 'manual' && (
                     <div className="bg-secondary p-6 rounded-lg shadow-md">
                        <label className="block text-dark-text font-bold mb-2">üí° √ù t∆∞·ªüng c√¢u chuy·ªán</label>
                        <textarea
                            value={manualStoryContent}
                            onChange={e => setManualStoryContent(e.target.value)}
                            placeholder="M√¥ t·∫£ √Ω t∆∞·ªüng c·ªßa b·∫°n... V√≠ d·ª•: C·∫≠u b√© v√† m·∫π ƒëi c√¥ng vi√™n, ch∆°i ƒëu quay, ƒÉn kem, m·∫∑t tr·ªùi l·∫∑n..."
                            className="w-full h-32 p-3 bg-primary rounded-md border border-gray-300 focus:ring-2 focus:ring-accent focus:outline-none transition"
                        />
                    </div>
                )}

                <div className="bg-secondary p-6 rounded-lg shadow-md space-y-4">
                    <div>
                        <label className="block text-dark-text font-bold mb-3">üé® Style m·∫´u nhanh</label>
                        <div className="flex flex-wrap gap-2">
                            {stylePills.map(style => (
                                <button
                                    type="button"
                                    key={style}
                                    onClick={() => handleStyleToggle(style)}
                                    className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors flex items-center gap-1.5 ${
                                        selectedStyles.includes(style)
                                            ? 'bg-accent text-white'
                                            : 'bg-primary hover:bg-gray-200 text-dark-text'
                                    }`}
                                >
                                    <svg className="w-5 h-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="1.5">
                                        <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    {style}
                                </button>
                            ))}
                            <button
                                type="button"
                                onClick={() => setShowCustomStyleInput(true)}
                                className="px-3 py-1.5 rounded-full text-sm font-medium transition-colors bg-primary hover:bg-gray-200 text-dark-text flex items-center gap-1.5"
                            >
                                + T√πy ch·ªçn th√™m
                            </button>
                        </div>
                        {showCustomStyleInput && (
                             <div className="mt-4">
                                <input
                                    type="text"
                                    value={customStyle}
                                    onChange={(e) => setCustomStyle(e.target.value)}
                                    placeholder="Nh·∫≠p style t√πy ch·ªânh (v√≠ d·ª•: Ghibli, Van Gogh...)"
                                    className="w-full p-3 bg-primary rounded-md border border-gray-300 focus:ring-2 focus:ring-accent focus:outline-none transition"
                                />
                            </div>
                        )}
                    </div>

                    <div>
                        <label className="block text-dark-text font-bold mb-2">üé≠ Th·ªÉ lo·∫°i c√¢u chuy·ªán</label>
                        <div className="flex flex-wrap gap-2">
                            {genres.map(genre => (
                                <button
                                    type="button"
                                    key={genre}
                                    onClick={() => setSelectedGenre(genre)}
                                    className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                                        selectedGenre === genre
                                            ? 'bg-accent text-white'
                                            : 'bg-primary hover:bg-gray-200 text-dark-text'
                                    }`}
                                >
                                    {genre}
                                </button>
                            ))}
                        </div>
                    </div>
                </div>

                 <div className="bg-secondary p-6 rounded-lg shadow-md">
                    <label className="block text-dark-text font-bold mb-2">Lo·∫°i Prompt</label>
                    <select value={granularity} onChange={e => setGranularity(e.target.value)} className="w-full p-3 bg-primary rounded-md border border-gray-300 focus:ring-2 focus:ring-accent focus:outline-none transition">
                        <option value="detailed">Chi ti·∫øt (cho video 8 gi√¢y)</option>
                        <option value="all">T·ªïng h·ª£p (cho to√†n b·ªô c√¢u chuy·ªán)</option>
                    </select>
                </div>

                <div>
                    <button type="submit" disabled={isLoading || (activeInputTab === 'select' && stories.length === 0)} className="w-full flex justify-center items-center bg-accent hover:bg-indigo-500 text-white font-bold py-3 px-4 rounded-lg transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed">
                        {isLoading ? <><Spinner /> <span className="ml-2">ƒêang t·∫°o...</span></> : 'T·∫°o Prompts'}
                    </button>
                    {activeInputTab === 'select' && stories.length === 0 && <p className="text-yellow-500 text-center mt-2">B·∫°n c·∫ßn t·∫°o m·ªôt c√¢u chuy·ªán tr∆∞·ªõc.</p>}
                </div>
            </form>

            {error && <p className="text-red-500 mt-4 text-center">{error}</p>}

            {generatedPrompts.length > 0 && (
                <div className="mt-8">
                    <h2 className="text-2xl font-bold text-light mb-4">C√°c Prompts ƒë√£ t·∫°o</h2>
                    <div className="space-y-4">
                        {generatedPrompts.map((prompt, index) => (
                            <div key={index} className="bg-secondary p-4 rounded-lg shadow">
                                <p className="text-gray-700">{prompt}</p>
                            </div>
                        ))}
                    </div>
                </div>
            )}
        </>
    );

    const renderHistory = () => (
        <div>
            <div className="bg-secondary p-4 rounded-lg shadow-md mb-4 flex items-center gap-4">
                <div className="flex-1">
                    <label className="block text-dark-text font-bold mb-1 text-sm">L·ªçc theo c√¢u chuy·ªán</label>
                    <select
                        value={historyFilterStoryId}
                        onChange={e => {
                            setHistoryFilterStoryId(e.target.value);
                            setSelectedPromptIds([]);
                        }}
                        className="w-full p-2 bg-primary rounded-md border border-gray-300 focus:ring-2 focus:ring-accent focus:outline-none transition"
                    >
                        <option value="">-- T·∫•t c·∫£ c√¢u chuy·ªán --</option>
                        {stories.map(story => (
                            <option key={story.id} value={story.id}>{story.title}</option>
                        ))}
                    </select>
                </div>
                {selectedPromptIds.length > 0 && (
                    <div className="flex items-end gap-2">
                        <button
                            onClick={handleImportToVeo}
                            className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors flex items-center gap-2"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M10 12a2 2 0 100-4 2 2 0 000 4z" /><path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.022 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" /></svg>
                            Import v√†o Veo ({selectedPromptIds.length})
                        </button>
                        <button
                            onClick={handleDeleteSelected}
                            className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors flex items-center gap-2"
                        >
                           <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                            X√≥a ({selectedPromptIds.length})
                        </button>
                    </div>
                )}
            </div>

            <div className="space-y-3">
                {filteredHistoryPrompts.length === 0 ? <p className="text-dark-text text-center py-8">Ch∆∞a c√≥ prompt n√†o ƒë∆∞·ª£c t·∫°o.</p> : (
                    filteredHistoryPrompts.map(prompt => (
                        <div
                            key={prompt.id}
                            className={`p-3 rounded-lg shadow flex items-center gap-4 transition-colors ${selectedPromptIds.includes(prompt.id) ? 'bg-accent/20' : 'bg-secondary'}`}
                        >
                            <input
                                type="checkbox"
                                className="form-checkbox h-5 w-5 text-accent rounded border-gray-300 focus:ring-accent"
                                checked={selectedPromptIds.includes(prompt.id)}
                                onChange={() => handleToggleSelectPrompt(prompt.id)}
                            />
                            <div className="flex-1 cursor-pointer" onClick={() => handleToggleSelectPrompt(prompt.id)}>
                                <p className="text-gray-700 text-sm">{prompt.prompt}</p>
                                <p className="text-xs text-dark-text mt-1 opacity-75">T·ª´: {prompt.storyTitle}</p>
                            </div>
                            <button onClick={() => handleCopyToClipboard(prompt.prompt)} title="Sao ch√©p" className="p-2 rounded-md hover:bg-gray-200 transition-colors"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-dark-text" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" /></svg></button>
                        </div>
                    ))
                )}
            </div>
        </div>
    );

    return (
        <div className="animate-fade-in">
            <h1 className="text-3xl font-bold text-light mb-2">T·∫°o Prompt Video</h1>
            <p className="text-dark-text mb-6">T·∫°o prompt t·ª´ c√¢u chuy·ªán c√≥ s·∫µn ho·∫∑c nh·∫≠p th·ªß c√¥ng.</p>

            <div className="mb-6">
                <div className="border-b border-gray-200">
                    <nav className="-mb-px flex space-x-6" aria-label="Tabs">
                         <button
                            onClick={() => setMainTab('create')}
                            className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors
                            ${mainTab === 'create'
                                ? 'border-accent text-accent'
                                : 'border-transparent text-dark-text hover:text-light hover:border-gray-300'
                            }`}
                        >
                            T·∫°o M·ªõi
                        </button>
                         <button
                            onClick={() => setMainTab('history')}
                            className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm transition-colors
                            ${mainTab === 'history'
                                ? 'border-accent text-accent'
                                : 'border-transparent text-dark-text hover:text-light hover:border-gray-300'
                            }`}
                        >
                            L·ªãch s·ª≠
                        </button>
                    </nav>
                </div>
            </div>

            {mainTab === 'create' ? renderCreateForm() : renderHistory()}
        </div>
    );
};

export default CreatePromptsView;